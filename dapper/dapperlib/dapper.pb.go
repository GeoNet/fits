// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.3
// source: dapper.proto

// protoc --go_out=dapperlib dapper.proto

package dapperlib

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataQueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DataQueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DataQueryResults) Reset() {
	*x = DataQueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQueryResults) ProtoMessage() {}

func (x *DataQueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQueryResults.ProtoReflect.Descriptor instead.
func (*DataQueryResults) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{0}
}

func (x *DataQueryResults) GetResults() []*DataQueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DataQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Key     string             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Field   string             `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Records []*DataQueryRecord `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *DataQueryResult) Reset() {
	*x = DataQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQueryResult) ProtoMessage() {}

func (x *DataQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQueryResult.ProtoReflect.Descriptor instead.
func (*DataQueryResult) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{1}
}

func (x *DataQueryResult) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DataQueryResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataQueryResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DataQueryResult) GetRecords() []*DataQueryRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type DataQueryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unix timestamp representing when the value was recorded
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The value of the record (encoded as a string)
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataQueryRecord) Reset() {
	*x = DataQueryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQueryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQueryRecord) ProtoMessage() {}

func (x *DataQueryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQueryRecord.ProtoReflect.Descriptor instead.
func (*DataQueryRecord) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{2}
}

func (x *DataQueryRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataQueryRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type KeyMetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*KeyMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *KeyMetadataList) Reset() {
	*x = KeyMetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetadataList) ProtoMessage() {}

func (x *KeyMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetadataList.ProtoReflect.Descriptor instead.
func (*KeyMetadataList) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{3}
}

func (x *KeyMetadataList) GetMetadata() []*KeyMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type KeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The domain the metadata is associated with
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The key the metadata is associated with
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The timespan(s) for which this key exists
	Span []*Timespan `protobuf:"bytes,3,rep,name=span,proto3" json:"span,omitempty"`
	// Name/Value pairs of metadata (e.g. 'model: MikroTik')
	Metadata map[string]*Metadata `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// String tags of metadata (e.g. 'LINZ')
	Tags     map[string]*Tag `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Location []*PointSpan    `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	// The relations to other keys from this metadata, the key of map is to_key
	Relations map[string]*RelationSpans `protobuf:"bytes,7,rep,name=relations,proto3" json:"relations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KeyMetadata) Reset() {
	*x = KeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetadata) ProtoMessage() {}

func (x *KeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetadata.ProtoReflect.Descriptor instead.
func (*KeyMetadata) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{4}
}

func (x *KeyMetadata) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *KeyMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyMetadata) GetSpan() []*Timespan {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *KeyMetadata) GetMetadata() map[string]*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyMetadata) GetTags() map[string]*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KeyMetadata) GetLocation() []*PointSpan {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *KeyMetadata) GetRelations() map[string]*RelationSpans {
	if x != nil {
		return x.Relations
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the metadata (e.g. 'model')
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value (and potentially past values)
	Values []*MetadataValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetValues() []*MetadataValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type MetadataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the metadata (e.g. 'MikroTik')
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The timespan this value is valid for
	Span *Timespan `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *MetadataValue) Reset() {
	*x = MetadataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataValue) ProtoMessage() {}

func (x *MetadataValue) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataValue.ProtoReflect.Descriptor instead.
func (*MetadataValue) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{6}
}

func (x *MetadataValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MetadataValue) GetSpan() *Timespan {
	if x != nil {
		return x.Span
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the tag (e.g. 'LINZ')
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The timespan this value is valid for
	Span []*Timespan `protobuf:"bytes,2,rep,name=span,proto3" json:"span,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetSpan() []*Timespan {
	if x != nil {
		return x.Span
	}
	return nil
}

type RelationSpans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The relations to other keys
	Spans []*RelationSpan `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *RelationSpans) Reset() {
	*x = RelationSpans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationSpans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationSpans) ProtoMessage() {}

func (x *RelationSpans) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationSpans.ProtoReflect.Descriptor instead.
func (*RelationSpans) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{8}
}

func (x *RelationSpans) GetSpans() []*RelationSpan {
	if x != nil {
		return x.Spans
	}
	return nil
}

type RelationSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the relation
	RelType string `protobuf:"bytes,1,opt,name=rel_type,json=relType,proto3" json:"rel_type,omitempty"`
	// The timespan this value is valid for
	Span *Timespan `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *RelationSpan) Reset() {
	*x = RelationSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationSpan) ProtoMessage() {}

func (x *RelationSpan) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationSpan.ProtoReflect.Descriptor instead.
func (*RelationSpan) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{9}
}

func (x *RelationSpan) GetRelType() string {
	if x != nil {
		return x.RelType
	}
	return ""
}

func (x *RelationSpan) GetSpan() *Timespan {
	if x != nil {
		return x.Span
	}
	return nil
}

type SnapshotRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromKey string `protobuf:"bytes,1,opt,name=from_key,json=fromKey,proto3" json:"from_key,omitempty"`
	ToKey   string `protobuf:"bytes,2,opt,name=to_key,json=toKey,proto3" json:"to_key,omitempty"`
	RelType string `protobuf:"bytes,3,opt,name=rel_type,json=relType,proto3" json:"rel_type,omitempty"`
}

func (x *SnapshotRelation) Reset() {
	*x = SnapshotRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRelation) ProtoMessage() {}

func (x *SnapshotRelation) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRelation.ProtoReflect.Descriptor instead.
func (*SnapshotRelation) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{10}
}

func (x *SnapshotRelation) GetFromKey() string {
	if x != nil {
		return x.FromKey
	}
	return ""
}

func (x *SnapshotRelation) GetToKey() string {
	if x != nil {
		return x.ToKey
	}
	return ""
}

func (x *SnapshotRelation) GetRelType() string {
	if x != nil {
		return x.RelType
	}
	return ""
}

type PointSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The Lat/Lon of the point
	Location *Point `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	//The timespan the value is valid for
	Span *Timespan `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *PointSpan) Reset() {
	*x = PointSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointSpan) ProtoMessage() {}

func (x *PointSpan) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointSpan.ProtoReflect.Descriptor instead.
func (*PointSpan) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{11}
}

func (x *PointSpan) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *PointSpan) GetSpan() *Timespan {
	if x != nil {
		return x.Span
	}
	return nil
}

type KeyMetadataSnapshotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*KeyMetadataSnapshot `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *KeyMetadataSnapshotList) Reset() {
	*x = KeyMetadataSnapshotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetadataSnapshotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetadataSnapshotList) ProtoMessage() {}

func (x *KeyMetadataSnapshotList) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetadataSnapshotList.ProtoReflect.Descriptor instead.
func (*KeyMetadataSnapshotList) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{12}
}

func (x *KeyMetadataSnapshotList) GetMetadata() []*KeyMetadataSnapshot {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A simplified version of KeyMetadata without Timespan components (snapshot of metadata at one moment in time)
type KeyMetadataSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The domain the metadata is associated with
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// The key the metadata is associated with
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The moment of the metadata snapshot
	Moment int64 `protobuf:"varint,3,opt,name=moment,proto3" json:"moment,omitempty"`
	// Name/Value pairs of metadata (e.g. 'model: MikroTik')
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// String tags of metadata (e.g. 'LINZ')
	Tags     []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Location *Point   `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// The relation type of to_key
	Relations []*SnapshotRelation `protobuf:"bytes,7,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *KeyMetadataSnapshot) Reset() {
	*x = KeyMetadataSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetadataSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetadataSnapshot) ProtoMessage() {}

func (x *KeyMetadataSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetadataSnapshot.ProtoReflect.Descriptor instead.
func (*KeyMetadataSnapshot) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{13}
}

func (x *KeyMetadataSnapshot) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *KeyMetadataSnapshot) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyMetadataSnapshot) GetMoment() int64 {
	if x != nil {
		return x.Moment
	}
	return 0
}

func (x *KeyMetadataSnapshot) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyMetadataSnapshot) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KeyMetadataSnapshot) GetLocation() *Point {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *KeyMetadataSnapshot) GetRelations() []*SnapshotRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type DomainMetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The domain being listed
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// All keys in the domain
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// All possible metadata fields & values in the domain
	Metadata map[string]*MetadataValuesList `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All possible tags in the domain
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DomainMetadataList) Reset() {
	*x = DomainMetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMetadataList) ProtoMessage() {}

func (x *DomainMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMetadataList.ProtoReflect.Descriptor instead.
func (*DomainMetadataList) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{14}
}

func (x *DomainMetadataList) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainMetadataList) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DomainMetadataList) GetMetadata() map[string]*MetadataValuesList {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DomainMetadataList) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MetadataValuesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata field name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// All potential values for that field
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MetadataValuesList) Reset() {
	*x = MetadataValuesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataValuesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataValuesList) ProtoMessage() {}

func (x *MetadataValuesList) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataValuesList.ProtoReflect.Descriptor instead.
func (*MetadataValuesList) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{15}
}

func (x *MetadataValuesList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetadataValuesList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Timespan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Timespan) Reset() {
	*x = Timespan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timespan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timespan) ProtoMessage() {}

func (x *Timespan) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timespan.ProtoReflect.Descriptor instead.
func (*Timespan) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{16}
}

func (x *Timespan) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Timespan) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dapper_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_dapper_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_dapper_proto_rawDescGZIP(), []int{17}
}

func (x *Point) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

var File_dapper_proto protoreflect.FileDescriptor

var file_dapper_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x84, 0x01,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xaa, 0x04, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x44, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x3f, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x70,
	0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x52,
	0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x5f, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x52, 0x0a, 0x17, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x02, 0x0a, 0x13, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf3, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x41, 0x0a, 0x05, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x64, 0x61, 0x70, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dapper_proto_rawDescOnce sync.Once
	file_dapper_proto_rawDescData = file_dapper_proto_rawDesc
)

func file_dapper_proto_rawDescGZIP() []byte {
	file_dapper_proto_rawDescOnce.Do(func() {
		file_dapper_proto_rawDescData = protoimpl.X.CompressGZIP(file_dapper_proto_rawDescData)
	})
	return file_dapper_proto_rawDescData
}

var file_dapper_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_dapper_proto_goTypes = []interface{}{
	(*DataQueryResults)(nil),        // 0: dapper.DataQueryResults
	(*DataQueryResult)(nil),         // 1: dapper.DataQueryResult
	(*DataQueryRecord)(nil),         // 2: dapper.DataQueryRecord
	(*KeyMetadataList)(nil),         // 3: dapper.KeyMetadataList
	(*KeyMetadata)(nil),             // 4: dapper.KeyMetadata
	(*Metadata)(nil),                // 5: dapper.Metadata
	(*MetadataValue)(nil),           // 6: dapper.MetadataValue
	(*Tag)(nil),                     // 7: dapper.Tag
	(*RelationSpans)(nil),           // 8: dapper.RelationSpans
	(*RelationSpan)(nil),            // 9: dapper.RelationSpan
	(*SnapshotRelation)(nil),        // 10: dapper.SnapshotRelation
	(*PointSpan)(nil),               // 11: dapper.PointSpan
	(*KeyMetadataSnapshotList)(nil), // 12: dapper.KeyMetadataSnapshotList
	(*KeyMetadataSnapshot)(nil),     // 13: dapper.KeyMetadataSnapshot
	(*DomainMetadataList)(nil),      // 14: dapper.DomainMetadataList
	(*MetadataValuesList)(nil),      // 15: dapper.MetadataValuesList
	(*Timespan)(nil),                // 16: dapper.Timespan
	(*Point)(nil),                   // 17: dapper.Point
	nil,                             // 18: dapper.KeyMetadata.MetadataEntry
	nil,                             // 19: dapper.KeyMetadata.TagsEntry
	nil,                             // 20: dapper.KeyMetadata.RelationsEntry
	nil,                             // 21: dapper.KeyMetadataSnapshot.MetadataEntry
	nil,                             // 22: dapper.DomainMetadataList.MetadataEntry
}
var file_dapper_proto_depIdxs = []int32{
	1,  // 0: dapper.DataQueryResults.results:type_name -> dapper.DataQueryResult
	2,  // 1: dapper.DataQueryResult.records:type_name -> dapper.DataQueryRecord
	4,  // 2: dapper.KeyMetadataList.metadata:type_name -> dapper.KeyMetadata
	16, // 3: dapper.KeyMetadata.span:type_name -> dapper.Timespan
	18, // 4: dapper.KeyMetadata.metadata:type_name -> dapper.KeyMetadata.MetadataEntry
	19, // 5: dapper.KeyMetadata.tags:type_name -> dapper.KeyMetadata.TagsEntry
	11, // 6: dapper.KeyMetadata.location:type_name -> dapper.PointSpan
	20, // 7: dapper.KeyMetadata.relations:type_name -> dapper.KeyMetadata.RelationsEntry
	6,  // 8: dapper.Metadata.values:type_name -> dapper.MetadataValue
	16, // 9: dapper.MetadataValue.span:type_name -> dapper.Timespan
	16, // 10: dapper.Tag.span:type_name -> dapper.Timespan
	9,  // 11: dapper.RelationSpans.spans:type_name -> dapper.RelationSpan
	16, // 12: dapper.RelationSpan.span:type_name -> dapper.Timespan
	17, // 13: dapper.PointSpan.location:type_name -> dapper.Point
	16, // 14: dapper.PointSpan.span:type_name -> dapper.Timespan
	13, // 15: dapper.KeyMetadataSnapshotList.metadata:type_name -> dapper.KeyMetadataSnapshot
	21, // 16: dapper.KeyMetadataSnapshot.metadata:type_name -> dapper.KeyMetadataSnapshot.MetadataEntry
	17, // 17: dapper.KeyMetadataSnapshot.location:type_name -> dapper.Point
	10, // 18: dapper.KeyMetadataSnapshot.relations:type_name -> dapper.SnapshotRelation
	22, // 19: dapper.DomainMetadataList.metadata:type_name -> dapper.DomainMetadataList.MetadataEntry
	5,  // 20: dapper.KeyMetadata.MetadataEntry.value:type_name -> dapper.Metadata
	7,  // 21: dapper.KeyMetadata.TagsEntry.value:type_name -> dapper.Tag
	8,  // 22: dapper.KeyMetadata.RelationsEntry.value:type_name -> dapper.RelationSpans
	15, // 23: dapper.DomainMetadataList.MetadataEntry.value:type_name -> dapper.MetadataValuesList
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_dapper_proto_init() }
func file_dapper_proto_init() {
	if File_dapper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dapper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataQueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataQueryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationSpans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetadataSnapshotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetadataSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataValuesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timespan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dapper_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dapper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dapper_proto_goTypes,
		DependencyIndexes: file_dapper_proto_depIdxs,
		MessageInfos:      file_dapper_proto_msgTypes,
	}.Build()
	File_dapper_proto = out.File
	file_dapper_proto_rawDesc = nil
	file_dapper_proto_goTypes = nil
	file_dapper_proto_depIdxs = nil
}
